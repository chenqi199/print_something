<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" 
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
        http://www.springframework.org/schema/context  
        http://www.springframework.org/schema/context/spring-context-4.2.xsd  
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
		http://www.springframework.org/schema/mvc  
        http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd">
        
    <!-- 引入jdbc配置文件 -->
    <context:property-placeholder location="/WEB-INF/dataSource.properties" />
    
    <!--创建jdbc数据源 -->
    <!-- 鞋库master -->
    <bean id="writeDataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${master.driverClassName}" />
        <property name="url" value="${master.url}" />
        <property name="username" value="${master.username}" />
        <property name="password" value="${master.password}" />
		<!-- 初始化连接大小 -->  
        <property name="initialSize" value="${master.initialSize}" />
        <!-- 连接池最大数量 -->  
        <property name="maxActive" value="${master.maxActive}" />
        <!-- 连接池最大空闲 -->  
        <property name="maxIdle" value="${master.maxIdle}" />
        <!-- 连接池最小空闲 -->  
        <property name="minIdle" value="${master.minIdle}" />
        <!-- 获取连接最大等待时间 -->  
        <property name="maxWait" value="${master.maxWait}" />  
        <property name="validationQuery" value="select 1" />
        <property name="testOnBorrow" value="true" />
		<property name="testOnReturn" value="true" />
		<property name="testWhileIdle" value="true" />
    </bean>
    
    <!-- 读库 slave -->
	<bean id="readDataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${slave.driverClassName}" />
        <property name="url" value="${slave.url}" />
        <property name="username" value="${slave.username}" />
        <property name="password" value="${slave.password}" />
		<!-- 初始化连接大小 -->  
        <property name="initialSize" value="${slave.initialSize}" />
        <!-- 连接池最大数量 -->  
        <property name="maxActive" value="${slave.maxActive}" />
        <!-- 连接池最大空闲 -->  
        <property name="maxIdle" value="${slave.maxIdle}" />
        <!-- 连接池最小空闲 -->  
        <property name="minIdle" value="${slave.minIdle}" />
        <!-- 获取连接最大等待时间 -->  
        <property name="maxWait" value="${slave.maxWait}" />   
        <property name="validationQuery" value="select 1" />
        <property name="testOnBorrow" value="true" />
		<property name="testOnReturn" value="true" />
		<property name="testWhileIdle" value="true" />
    </bean>
    
    <!-- 读写动态库配置  -->
    <bean id="readWriteDataSource" class="com.bshinfo.cl.util.db.ReadWriteDataSource">
	    <property name="writeDataSource" ref="writeDataSource"/>  
	    <property name="readDataSourceMap">
	    	<map>
	    		<entry key="readDataSource1" value-ref="readDataSource"/>
	    	</map>
	    </property>
	</bean>
	
	<!-- 为数据源定义 SqlSessionFactory -->
	<!-- 扫描 MyBatis Sql -->
	<!-- 方法一：原理：使用sqlSessionFactoryBeanName注入，不会立即初始化sqlSessionFactory, 所以不会引发提前初始化问题，同时还应注意在配置org.mybatis.spring.SqlSessionFactoryBean 
	这个Bean时，id不能为sqlSessionFactory，如果为这样的话会导致MapperScannerConigurer在bean定义加载时，加载PropertyPlaceholderConfigurer还没来得及替换定义中的变量 -->
	<!-- 方法二：直接删掉<property name="sqlSessionFactory" ref="sqlSessionFactory"/> 注意：在没有配置这一行时，必须配置一个以sqlSessionFactory命名的org.mybatis.spring.SqlSessionFactoryBean。 -->
    <bean id="sxysqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="readWriteDataSource" />
		<property name="configLocation" value="/WEB-INF/mybatis-config.xml" />
		<!-- mapper 和 resultmap配置路径 -->
		<property name="mapperLocations" value="classpath:mappers/*Mapper.xml" />
		<property name="typeAliasesPackage" value="com.bshinfo.cl.model" />
    </bean>	
    
    <!-- 为数据源定义 SqlMapper -->
    <!-- 扫描mapper.java -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer" autowire="byName">
	    <property name="basePackage" value="com.bshinfo.cl.dao" />
	    <property name="sqlSessionFactoryBeanName" value="sxysqlSessionFactory" />
	</bean>
	
	<!-- 读/写动态数据库选择处理器 -->
	<!-- forceChoiceReadWhenWrite：用于确定在如果目前是写（即开启了事务），下一步如果是读，是直接参与到写库进行读，还是强制从读库读  -->
	<bean id="readWriteDataSourceTransactionProcessor" class="com.bshinfo.cl.util.db.ReadWriteDataSourceProcessor">
  		<property name="forceChoiceReadWhenWrite" value="true"/>
	</bean>
	
	<!-- 事务管理器 -->
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
        <property name="dataSource" ref="readWriteDataSource"/>  
    </bean>
   
     <!-- XML事务属性配置 -->   
	<tx:advice id="txAdvice" transaction-manager="txManager">
	    <tx:attributes>
	        <tx:method name="insert*" propagation="REQUIRED" rollback-for="Exception"/>
	        <tx:method name="update*" propagation="REQUIRED" rollback-for="Exception"/>
	        <tx:method name="delete*" propagation="REQUIRED" rollback-for="Exception"/>
	        
	        <tx:method name="get*" read-only="true" rollback-for="Exception"/>
	        <tx:method name="select*" read-only="true" rollback-for="Exception"/>
	        <tx:method name="find*" read-only="true" rollback-for="Exception"/>
	    </tx:attributes>
	</tx:advice>
	
	<!-- 事务切面和读/写库选择切面 -->
	<aop:config expose-proxy="true">
	    <!-- 只对业务逻辑层实施事务 -->
	    <aop:pointcut id="txPointcut" expression="execution(* com.bshinfo.cl.dao..*.*(..))" />
	    <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
	      
	    <!-- 通过AOP切面实现读/写库选择 -->
	    <aop:aspect order="-2147483647" ref="readWriteDataSourceTransactionProcessor">
	       <aop:around pointcut-ref="txPointcut" method="determineReadOrWriteDB"/>
	       <aop:after pointcut-ref="txPointcut" method="insertLog"/>
	    </aop:aspect>
	    
	</aop:config>
	
	<!-- 配置基于注解的事物aop -->  
	<!-- tx:annotation-driven transaction-manager="txManager" proxy-target-class="true"/-->
	
	
</beans>